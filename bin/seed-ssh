#!/usr/bin/env bash

#####
## This script SSHs to the Terraform-provisioned seed node by querying the Terraform state for
## connection details
#####

set -e

if [ -z "$AZIMUTH_CONFIG_ROOT" ] || [ -z "$AZIMUTH_CONFIG_ENVIRONMENT_ROOT" ]; then
    echo "Please activate an environment" >&2
    exit 1
fi

WORK_DIRECTORY="${AZIMUTH_CONFIG_ROOT}/.work/${AZIMUTH_ENVIRONMENT}"

AZIMUTH_TERRAFORM_BACKEND_TYPE="${AZIMUTH_TERRAFORM_BACKEND_TYPE:-local}"
if [ "$AZIMUTH_TERRAFORM_BACKEND_TYPE" = "local" ]; then
    # If the Terraform backend is local, that means the provisioning is run on the current host
    # Hence there should be a pre-existing Terraform project directory we can point at
    terraform_dir="${AZIMUTH_TERRAFORM_LOCAL_PATH:-"${WORK_DIRECTORY}/terraform"}"
else
    # If the Terraform backend type is something other than local, make a terraform
    # directory containing a backend configuration that specifies the type
    # We support some special cases where additional environment variables are respected
    # In other cases, the backend configuration should come from environment variables
    terraform_dir="${WORK_DIRECTORY}/seed-ssh"
    mkdir -p "$terraform_dir"
    echo "terraform {" > "$terraform_dir/backend.tf"
    echo "  backend \"${AZIMUTH_TERRAFORM_BACKEND_TYPE}\" {" >> "$terraform_dir/backend.tf"
    if [ "$AZIMUTH_TERRAFORM_BACKEND_TYPE" = "swift" ]; then
        if [ -z "$AZIMUTH_TERRAFORM_BACKEND_SWIFT_CONTAINER" ]; then
            echo "AZIMUTH_TERRAFORM_BACKEND_SWIFT_CONTAINER is required for the Swift backend" >&2
            exit 1
        fi
        echo "    container = \"${AZIMUTH_TERRAFORM_BACKEND_SWIFT_CONTAINER}\"" >> "$terraform_dir/backend.tf"
    elif [ "$AZIMUTH_TERRAFORM_BACKEND_TYPE" = "s3" ]; then
        if [ -z "$AZIMUTH_TERRAFORM_BACKEND_S3_BUCKET" ]; then
            echo "AZIMUTH_TERRAFORM_BACKEND_S3_BUCKET is required for the S3 backend" >&2
            exit 1
        fi
        if [ -z "$AZIMUTH_TERRAFORM_BACKEND_S3_KEY" ]; then
            echo "AZIMUTH_TERRAFORM_BACKEND_S3_KEY is required for the S3 backend" >&2
            exit 1
        fi
        if [ -z "$AZIMUTH_TERRAFORM_BACKEND_S3_REGION" ]; then
            echo "AZIMUTH_TERRAFORM_BACKEND_S3_REGION is required for the S3 backend" >&2
            exit 1
        fi
        # Take all environment variable that are prefixed with AZIMUTH_TERRAFORM_BACKEND_S3_,
        # remove the prefix, lowercase them, then add them to backend.tf.
        for azimuth_s3_var in $(env | grep "^AZIMUTH_TERRAFORM_BACKEND_S3_" | cut -f1 -d =); do
            tf_var=$(echo "${azimuth_s3_var//AZIMUTH_TERRAFORM_BACKEND_S3_/}" | tr '[:upper:]' '[:lower:]')
            echo "    ${tf_var} = \"${!azimuth_s3_var}\"" >> "$terraform_dir/backend.tf"
        done
    fi
    echo "  }" >> "$terraform_dir/backend.tf"
    echo "}" >> "$terraform_dir/backend.tf"
    PATH="${AZIMUTH_CONFIG_ROOT}/.bin:$PATH" terraform -chdir="$terraform_dir" init
fi

# Read the required variables from the Terraform state
tfstate_file="$(mktemp)"
PATH="${AZIMUTH_CONFIG_ROOT}/.bin:$PATH" terraform -chdir="$terraform_dir" state pull > "$tfstate_file"
node_ip="$(jq -r '.outputs.cluster_gateway_ip.value' "$tfstate_file")"
# Write the SSH key to a temporary file
deploy_key="$(mktemp -p ${terraform_dir})"
jq -r '.outputs.cluster_ssh_private_key.value' "$tfstate_file" > "$deploy_key"

# Run the SSH command
exec ssh -o UserKnownHostsFile=/dev/null -A -i $deploy_key ubuntu@$node_ip "$@"
