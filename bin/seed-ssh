#!/usr/bin/env bash

#####
## This script SSHs to the Terraform-provisioned seed node by querying the Terraform state for
## connection details
#####

set -eo pipefail


if [ -z "$AZIMUTH_CONFIG_ROOT" ] || [ -z "$AZIMUTH_CONFIG_ENVIRONMENT_ROOT" ]; then
    echo "Please activate an environment" >&2
    exit 1
fi


ansible_variable() {
    ANSIBLE_LOAD_CALLBACK_PLUGINS=true \
    ANSIBLE_STDOUT_CALLBACK=json \
    ansible -m debug -a "var=$1" all | \
      jq -r ".plays[0].tasks[0].hosts.localhost.$1"
}


# Add the Terraform binary directory to the PATH, so we can use it if it exists
terraform_binary_directory="$(ansible_variable terraform_binary_directory)"
export PATH="$PATH:$terraform_binary_directory"

# Initialise the Terraform backend
terraform_backend_type="$(ansible_variable terraform_backend_type)"
if [ "$terraform_backend_type" = "local" ]; then
    # If the Terraform backend is local, that means the provisioning is run on the current host
    # Hence there should be a pre-existing Terraform project directory we can point at
    terraform_dir="$(ansible_variable terraform_project_path)"
else
    # If the Terraform backend type is something other than local, make a terraform
    # directory containing a backend configuration that specifies the type and config
    terraform_dir="$(ansible_variable work_directory)/seed-ssh"
    mkdir -p "$terraform_dir"
    cat <<EOF > "$terraform_dir/backend.tf"
terraform {
  backend "${terraform_backend_type}" {}
}
EOF
    ansible_variable terraform_backend_config > "$terraform_dir/backend_config.json"
    terraform \
      -chdir="$terraform_dir" \
      init \
      -input=false \
      -reconfigure \
      -backend-config=$terraform_dir/backend_config.json
fi

# Read the required variables from the Terraform state
tfstate_file="$(mktemp)"
terraform -chdir="$terraform_dir" state pull > "$tfstate_file"
node_ip="$(jq -r '.outputs.cluster_gateway_ip.value' "$tfstate_file")"
# Write the SSH key to a temporary file
deploy_key="$(mktemp)"
jq -r '.outputs.cluster_ssh_private_key.value' "$tfstate_file" > "$deploy_key"

# Run the SSH command
exec \
  ssh \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -A \
    -i $deploy_key \
    ubuntu@$node_ip \
    "$@"
