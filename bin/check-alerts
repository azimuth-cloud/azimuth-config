#!/usr/bin/env bash

#####
# This script is designed to be run as part of the deployment CI workflow
# to check that the expected number of alerts are firing after deployment
#####

if [[ -z $1 ]]; then
  echo "You must provide an expected alert count as the sole command line arg to this script"
  exit 1
fi
EXPECTED_ALERT_COUNT=$1

echo "Starting port-forward for Prometheus API"
./bin/port-forward prometheus 9090 > /dev/null 2>&1 &
PID="$!"
# Make sure port-forward is killed on exit
trap 'kill $PID' EXIT

# Wait for the Prometheus API to come up
API_RETRIES=0
API_RETRY_LIMIT=24
API_RETRY_SLEEP=5
while true; do
  API_RETRIES=$(( API_RETRIES + 1 ))
  echo "Waiting for Prometheus API to become available (attempt $API_RETRIES of $API_RETRY_LIMIT)"

  if curl -fsSL http://localhost:9090/api/v1/alerts > /dev/null 2>&1; then
    break
  elif [[ ${API_RETRIES} -eq ${API_RETRY_LIMIT} ]]; then
    echo "Timed out waiting for Prometheus API" >&2
    exit 1
  else
    sleep "$API_RETRY_SLEEP"
  fi
done

# Retry in case the alerts are ephemeral
RETRIES=0
RETRY_LIMIT=60
RETRY_SLEEP=10
while true; do
    RETRIES=$(( RETRIES + 1 ))
    echo "Querying alerts (attempt $RETRIES of $RETRY_LIMIT)"

    ALERTS="$(curl -fsSL http://localhost:9090/api/v1/alerts)"
    ALERT_COUNT="$(echo "$ALERTS" | jq -r '.data.alerts | length')"
    echo "  Found $ALERT_COUNT pending or firing alerts:"
    echo "$ALERTS" | jq -r '.data.alerts[] | "    " + .labels.alertname + " is " + .state'
    echo ""

    if [[ $ALERT_COUNT == $EXPECTED_ALERT_COUNT ]]; then
        exit
    elif [[ ${RETRIES} -eq ${RETRY_LIMIT} ]]; then
        exit 1
    else
        sleep "$RETRY_SLEEP"
    fi
done
